# Generated by Django 5.1.5 on 2025-01-31 13:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChecklistBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("supervisor_approved", "Supervisor Approved"),
                            ("quality_approved", "Quality Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "selected_model",
                    models.CharField(
                        choices=[
                            ("P703", "P703"),
                            ("U704", "U704"),
                            ("FD", "FD"),
                            ("SA", "SA"),
                            ("Gnome", "Gnome"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "line_pressure",
                    models.FloatField(
                        help_text="Range: 4.5 - 5.5 bar",
                        validators=[
                            django.core.validators.MinValueValidator(4.5),
                            django.core.validators.MaxValueValidator(5.5),
                        ],
                    ),
                ),
                (
                    "oring_condition",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "uv_flow_input_pressure",
                    models.FloatField(
                        help_text="Range: 11-15 kPa",
                        validators=[
                            django.core.validators.MinValueValidator(11),
                            django.core.validators.MaxValueValidator(15),
                        ],
                    ),
                ),
                (
                    "master_verification_lvdt",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "good_bad_master_verification",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "test_pressure_vacuum",
                    models.FloatField(
                        help_text="Range: 0.25 - 0.3 MPa",
                        validators=[
                            django.core.validators.MinValueValidator(0.25),
                            django.core.validators.MaxValueValidator(0.3),
                        ],
                    ),
                ),
                (
                    "tool_alignment",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                ("top_tool_id", models.CharField(max_length=100)),
                ("bottom_tool_id", models.CharField(max_length=100)),
                ("uv_assy_stage_id", models.CharField(max_length=100)),
                ("retainer_part_no", models.CharField(max_length=100)),
                ("uv_clip_part_no", models.CharField(max_length=100)),
                ("umbrella_part_no", models.CharField(max_length=100)),
                (
                    "retainer_id_lubrication",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "error_proofing_verification",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=3
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("operator", "Operator"),
                            ("shift_supervisor", "Shift Supervisor"),
                            ("quality_supervisor", "Quality Supervisor"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Concern",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("concern_identified", models.TextField()),
                ("cause_if_known", models.TextField(blank=True)),
                ("action_taken", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "checklist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.checklistbase",
                    ),
                ),
                (
                    "manufacturing_approval",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manufacturing_approvals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "quality_approval",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality_approvals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Shift",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now=True)),
                (
                    "shift_type",
                    models.CharField(
                        choices=[
                            ("day", "Day Shift (8 AM - 8 PM)"),
                            ("night", "Night Shift (8 PM - 8 AM)"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operated_shifts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "quality_supervisor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality_supervised_shifts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shift_supervisor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supervised_shifts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("date", "shift_type")},
            },
        ),
        migrations.AddField(
            model_name="checklistbase",
            name="shift",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="main.shift"
            ),
        ),
        migrations.CreateModel(
            name="SubgroupEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subgroup_number", models.PositiveIntegerField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "uv_vacuum_test",
                    models.FloatField(
                        help_text="Range: -35 to -43 kPa",
                        validators=[
                            django.core.validators.MinValueValidator(-43),
                            django.core.validators.MaxValueValidator(-35),
                        ],
                    ),
                ),
                (
                    "uv_flow_value",
                    models.FloatField(
                        help_text="Range: 30-40 LPM",
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(40),
                        ],
                    ),
                ),
                (
                    "umbrella_valve_assembly",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "uv_clip_pressing",
                    models.CharField(
                        choices=[("OK", "OK"), ("NG", "NG")], max_length=2
                    ),
                ),
                (
                    "workstation_clean",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=3
                    ),
                ),
                (
                    "bin_contamination_check",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=3
                    ),
                ),
                (
                    "checklist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subgroup_entries",
                        to="main.checklistbase",
                    ),
                ),
            ],
            options={
                "ordering": ["subgroup_number"],
                "unique_together": {("checklist", "subgroup_number")},
            },
        ),
        migrations.CreateModel(
            name="Verification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("verified_at", models.DateTimeField(auto_now_add=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "quality_supervisor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality_supervisor_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shift_supervisor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shift_supervisor_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subgroup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.subgroupentry",
                    ),
                ),
                (
                    "team_leader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_leader_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
